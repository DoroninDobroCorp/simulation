#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–ú–æ–¥—É–ª—å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–π —Å—Ç–∞–≤–æ–∫.
"""

import sys
import numpy as np
from bet_strategies import (
    calculate_kelly_bet,
    calculate_linear_roi_bet,
    calculate_sqrt_roi_bet,
    calculate_constant_profit_bet
)
from bet_simulator import BetSimulator
from distribution_generator import DistributionGenerator


def test_win_probability_calculation():
    """–¢–µ—Å—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ —Ä–∞—Å—á—ë—Ç–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –≤—ã–∏–≥—Ä—ã—à–∞ –∏–∑ ROI."""
    print("=" * 60)
    print("–¢–ï–°–¢: –†–∞—Å—á—ë—Ç –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –≤—ã–∏–≥—Ä—ã—à–∞ –∏–∑ ROI")
    print("=" * 60)
    
    test_cases = [
        # (odds, roi, expected_win_prob)
        (2.0, 5.0, 0.525),   # ROI=5% –ø—Ä–∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–µ 2.0 => p = 1.05/2 = 0.525
        (3.0, 10.0, 0.367),  # ROI=10% –ø—Ä–∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–µ 3.0 => p = 1.10/3 = 0.367
        (1.5, 3.0, 0.687),   # ROI=3% –ø—Ä–∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–µ 1.5 => p = 1.03/1.5 = 0.687
    ]
    
    all_passed = True
    for odds, roi, expected_prob in test_cases:
        # –§–æ—Ä–º—É–ª–∞: win_prob = (1 + ROI/100) / odds
        calculated_prob = (1 + roi / 100) / odds
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å —Ç–æ—á–Ω–æ—Å—Ç—å—é –¥–æ 0.001
        if abs(calculated_prob - expected_prob) < 0.001:
            print(f"‚úÖ PASS: odds={odds}, roi={roi}% => p={calculated_prob:.3f}")
        else:
            print(f"‚ùå FAIL: odds={odds}, roi={roi}% => p={calculated_prob:.3f} (–æ–∂–∏–¥–∞–ª–æ—Å—å {expected_prob:.3f})")
            all_passed = False
    
    print()
    return all_passed


def test_kelly_strategy():
    """–¢–µ—Å—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ö–µ–ª–ª–∏."""
    print("=" * 60)
    print("–¢–ï–°–¢: –°—Ç—Ä–∞—Ç–µ–≥–∏—è –ö–µ–ª–ª–∏")
    print("=" * 60)
    
    bank = 10000
    
    test_cases = [
        # (odds, roi, risk, kelly_fraction, should_bet)
        (2.0, 5.0, 2.0, 0.5, True),   # –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ
        (2.0, -2.0, 2.0, 0.5, False), # –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π ROI => –Ω–µ —Å—Ç–∞–≤–∏–º
        (1.5, 0.5, 2.0, 0.5, False),  # –°–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–∏–π ROI
        (3.0, 15.0, 1.5, 1.0, True),  # –í—ã—Å–æ–∫–∏–π ROI => –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è —Å—Ç–∞–≤–∫–∞
    ]
    
    all_passed = True
    for odds, roi, risk, kelly_fraction, should_bet in test_cases:
        bet_size = calculate_kelly_bet(odds, roi, bank, risk, kelly_fraction)
        
        if should_bet:
            if bet_size > 0:
                bet_pct = (bet_size / bank) * 100
                print(f"‚úÖ PASS: odds={odds}, roi={roi}%, risk={risk} => —Å—Ç–∞–≤–∫–∞ {bet_size:.2f} ({bet_pct:.2f}%)")
            else:
                print(f"‚ùå FAIL: odds={odds}, roi={roi}%, risk={risk} => —Å—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å > 0, –ø–æ–ª—É—á–∏–ª–∏ {bet_size:.2f}")
                all_passed = False
        else:
            if bet_size == 0:
                print(f"‚úÖ PASS: odds={odds}, roi={roi}%, risk={risk} => —Å—Ç–∞–≤–∫–∞ 0 (–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ)")
            else:
                print(f"‚ùå FAIL: odds={odds}, roi={roi}%, risk={risk} => —Å—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å 0, –ø–æ–ª—É—á–∏–ª–∏ {bet_size:.2f}")
                all_passed = False
    
    print()
    return all_passed


def test_strategies_validation():
    """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–π."""
    print("=" * 60)
    print("–¢–ï–°–¢: –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
    print("=" * 60)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    invalid_cases = [
        # (odds, roi, bank, strategy_name)
        (-1.0, 5.0, 10000, "kelly"),      # –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç
        (2.0, -10.0, 10000, "kelly"),     # –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π ROI
        (2.0, 5.0, 0, "kelly"),           # –ù—É–ª–µ–≤–æ–π –±–∞–Ω–∫
        (0, 5.0, 10000, "linear_roi"),    # –ù—É–ª–µ–≤–æ–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç
    ]
    
    strategies = {
        "kelly": calculate_kelly_bet,
        "linear_roi": calculate_linear_roi_bet,
        "sqrt_roi": calculate_sqrt_roi_bet,
    }
    
    all_passed = True
    for odds, roi, bank, strategy_name in invalid_cases:
        strategy_func = strategies.get(strategy_name)
        if not strategy_func:
            continue
        
        bet_size = strategy_func(odds, roi, bank)
        
        if bet_size == 0:
            print(f"‚úÖ PASS: {strategy_name} —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ (odds={odds}, roi={roi}, bank={bank}) => –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 0")
        else:
            print(f"‚ùå FAIL: {strategy_name} —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ (odds={odds}, roi={roi}, bank={bank}) => –¥–æ–ª–∂–Ω–∞ –≤–µ—Ä–Ω—É—Ç—å 0, –ø–æ–ª—É—á–∏–ª–∏ {bet_size}")
            all_passed = False
    
    print()
    return all_passed


def test_simulation_integrity():
    """–¢–µ—Å—Ç —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ —Å–∏–º—É–ª—è—Ü–∏–∏."""
    print("=" * 60)
    print("–¢–ï–°–¢: –¶–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å —Å–∏–º—É–ª—è—Ü–∏–∏")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞—ë–º —Å–∏–º—É–ª—è—Ç–æ—Ä —Å –ø—Ä–æ—Å—Ç–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–µ–π
    initial_bank = 10000
    simulator = BetSimulator(
        initial_bank=initial_bank,
        strategy_func=calculate_kelly_bet,
        strategy_params={'risk': 2.0, 'kelly_fraction': 0.5}
    )
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ—Ä–æ—Ç–∫—É—é —Å–∏–º—É–ª—è—Ü–∏—é
    results = simulator.simulate_series(num_bets=100)
    
    all_passed = True
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–µ –∏–Ω–≤–∞—Ä–∏–∞–Ω—Ç—ã
    if results['initial_bank'] == initial_bank:
        print(f"‚úÖ PASS: –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–Ω–∫ –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω: {results['initial_bank']}")
    else:
        print(f"‚ùå FAIL: –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–Ω–∫ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω: {results['initial_bank']} (–æ–∂–∏–¥–∞–ª–æ—Å—å {initial_bank})")
        all_passed = False
    
    if results['final_bank'] >= 0:
        print(f"‚úÖ PASS: –ò—Ç–æ–≥–æ–≤—ã–π –±–∞–Ω–∫ –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª–µ–Ω: {results['final_bank']:.2f}")
    else:
        print(f"‚ùå FAIL: –ò—Ç–æ–≥–æ–≤—ã–π –±–∞–Ω–∫ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª–µ–Ω: {results['final_bank']:.2f}")
        all_passed = False
    
    if 0 <= results['win_rate'] <= 1:
        print(f"‚úÖ PASS: Win rate –≤ –¥–æ–ø—É—Å—Ç–∏–º–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ: {results['win_rate']:.2%}")
    else:
        print(f"‚ùå FAIL: Win rate –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ [0, 1]: {results['win_rate']:.2%}")
        all_passed = False
    
    if results['max_drawdown_from_peak'] >= 0:
        print(f"‚úÖ PASS: –ü—Ä–æ—Å–∞–¥–∫–∞ –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞: {results['max_drawdown_from_peak']:.2f}%")
    else:
        print(f"‚ùå FAIL: –ü—Ä–æ—Å–∞–¥–∫–∞ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞: {results['max_drawdown_from_peak']:.2f}%")
        all_passed = False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—ã –º–∞—Å—Å–∏–≤–æ–≤
    if len(results['bank_history']) == results['num_bets'] + 1:
        print(f"‚úÖ PASS: –î–ª–∏–Ω–∞ bank_history –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞: {len(results['bank_history'])}")
    else:
        print(f"‚ùå FAIL: –î–ª–∏–Ω–∞ bank_history –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞: {len(results['bank_history'])} (–æ–∂–∏–¥–∞–ª–æ—Å—å {results['num_bets'] + 1})")
        all_passed = False
    
    print()
    return all_passed


def test_roi_from_probability():
    """–¢–µ—Å—Ç –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è: –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å -> ROI."""
    print("=" * 60)
    print("–¢–ï–°–¢: –û–±—Ä–∞—Ç–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ (–≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å -> ROI)")
    print("=" * 60)
    
    test_cases = [
        # (odds, win_probability, expected_roi)
        (2.0, 0.525, 5.0),
        (3.0, 0.367, 10.1),  # –° —É—á—ë—Ç–æ–º –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç–∏ –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è
        (1.5, 0.687, 3.05),
    ]
    
    all_passed = True
    for odds, win_prob, expected_roi in test_cases:
        # –§–æ—Ä–º—É–ª–∞: ROI = (win_prob * odds - 1) * 100
        calculated_roi = (win_prob * odds - 1) * 100
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å —Ç–æ—á–Ω–æ—Å—Ç—å—é –¥–æ 0.2%
        if abs(calculated_roi - expected_roi) < 0.2:
            print(f"‚úÖ PASS: odds={odds}, p={win_prob:.3f} => ROI={calculated_roi:.2f}%")
        else:
            print(f"‚ùå FAIL: odds={odds}, p={win_prob:.3f} => ROI={calculated_roi:.2f}% (–æ–∂–∏–¥–∞–ª–æ—Å—å {expected_roi:.2f}%)")
            all_passed = False
    
    print()
    return all_passed


def run_all_tests():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤."""
    print("\n" + "=" * 60)
    print("–ó–ê–ü–£–°–ö –í–°–ï–• –¢–ï–°–¢–û–í")
    print("=" * 60 + "\n")
    
    results = []
    
    results.append(("–†–∞—Å—á—ë—Ç –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –≤—ã–∏–≥—Ä—ã—à–∞", test_win_probability_calculation()))
    results.append(("–û–±—Ä–∞—Ç–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ", test_roi_from_probability()))
    results.append(("–°—Ç—Ä–∞—Ç–µ–≥–∏—è –ö–µ–ª–ª–∏", test_kelly_strategy()))
    results.append(("–í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö", test_strategies_validation()))
    results.append(("–¶–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å —Å–∏–º—É–ª—è—Ü–∏–∏", test_simulation_integrity()))
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á—ë—Ç
    print("=" * 60)
    print("–ò–¢–û–ì–û–í–´–ô –û–¢–ß–Å–¢")
    print("=" * 60)
    
    passed = sum(1 for _, result in results if result)
    total = len(results)
    
    for test_name, result in results:
        status = "‚úÖ PASSED" if result else "‚ùå FAILED"
        print(f"{status}: {test_name}")
    
    print()
    print(f"–ü—Ä–æ–π–¥–µ–Ω–æ: {passed}/{total} —Ç–µ—Å—Ç–æ–≤")
    
    if passed == total:
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´!")
        return 0
    else:
        print(f"\n‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: {total - passed} —Ç–µ—Å—Ç(–æ–≤) –ø—Ä–æ–≤–∞–ª–µ–Ω–æ!")
        return 1


if __name__ == "__main__":
    sys.exit(run_all_tests())
